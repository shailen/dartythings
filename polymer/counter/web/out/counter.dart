// Auto-generated from counter.html.
// DO NOT EDIT.

library x_counter;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:mdv/mdv.dart' as autogenerated_mdv;
import 'package:observe/observe.dart' as __observe;
import 'package:polymer/polymer.dart' as autogenerated;
import 'dart:async';
import 'package:polymer/polymer.dart';
import 'package:observe/observe.dart';



class Counter extends CustomElement with ObservableMixin {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-counter");
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''Counting: {{counter}}''');

  void initShadow() {
    var __root = createShadowRoot("x-counter");
    shadowRootReady(__root, "x-counter");
    setScopedCss("x-counter", new autogenerated.ScopedCssMapper({"x-counter":"[is=\"x-counter\"]"}));
    _css = getScopedCss("x-counter");
    __root.nodes.add(cloneTemplate(__shadowTemplate));
    autogenerated_mdv.bindModel(__root, this);
  }

  /** Original code from the component. */

  int __$counter = 0;
  int get counter => __$counter;
  set counter(int value) {
    __$counter = notifyPropertyChange(const Symbol('counter'), __$counter, value);
  }
  

  void inserted() {
    new Timer.periodic(const Duration(seconds: 1), (_) => counter++);
  }

  getValueWorkaround(key) {
    if (key == const Symbol('counter')) return this.counter;
    return null;
  }
  
  setValueWorkaround(key, value) {
    if (key == const Symbol('counter')) { this.counter = value; return; }
  }
  }
//# sourceMappingURL=counter.dart.map